// Code generated by MockGen. DO NOT EDIT.
// Source: ../github.com/lxc/lxd/client/interfaces.go

// Package mock_lxd is a generated GoMock package.
package mock_lxd

import (
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	lxd "github.com/lxc/lxd/client"
	api "github.com/lxc/lxd/shared/api"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockOperation is a mock of Operation interface
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method
func (m *MockOperation) AddHandler(function func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", function)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler
func (mr *MockOperationMockRecorder) AddHandler(function interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockOperation)(nil).AddHandler), function)
}

// Cancel mocks base method
func (m *MockOperation) Cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockOperationMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOperation)(nil).Cancel))
}

// Get mocks base method
func (m *MockOperation) Get() api.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(api.Operation)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockOperationMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperation)(nil).Get))
}

// GetWebsocket mocks base method
func (m *MockOperation) GetWebsocket(secret string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsocket", secret)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebsocket indicates an expected call of GetWebsocket
func (mr *MockOperationMockRecorder) GetWebsocket(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsocket", reflect.TypeOf((*MockOperation)(nil).GetWebsocket), secret)
}

// RemoveHandler mocks base method
func (m *MockOperation) RemoveHandler(target *lxd.EventTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHandler", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHandler indicates an expected call of RemoveHandler
func (mr *MockOperationMockRecorder) RemoveHandler(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockOperation)(nil).RemoveHandler), target)
}

// Refresh mocks base method
func (m *MockOperation) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockOperationMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockOperation)(nil).Refresh))
}

// Wait mocks base method
func (m *MockOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockOperationMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOperation)(nil).Wait))
}

// MockRemoteOperation is a mock of RemoteOperation interface
type MockRemoteOperation struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteOperationMockRecorder
}

// MockRemoteOperationMockRecorder is the mock recorder for MockRemoteOperation
type MockRemoteOperationMockRecorder struct {
	mock *MockRemoteOperation
}

// NewMockRemoteOperation creates a new mock instance
func NewMockRemoteOperation(ctrl *gomock.Controller) *MockRemoteOperation {
	mock := &MockRemoteOperation{ctrl: ctrl}
	mock.recorder = &MockRemoteOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteOperation) EXPECT() *MockRemoteOperationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method
func (m *MockRemoteOperation) AddHandler(function func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", function)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler
func (mr *MockRemoteOperationMockRecorder) AddHandler(function interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockRemoteOperation)(nil).AddHandler), function)
}

// CancelTarget mocks base method
func (m *MockRemoteOperation) CancelTarget() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTarget")
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTarget indicates an expected call of CancelTarget
func (mr *MockRemoteOperationMockRecorder) CancelTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTarget", reflect.TypeOf((*MockRemoteOperation)(nil).CancelTarget))
}

// GetTarget mocks base method
func (m *MockRemoteOperation) GetTarget() (*api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTarget")
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTarget indicates an expected call of GetTarget
func (mr *MockRemoteOperationMockRecorder) GetTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*MockRemoteOperation)(nil).GetTarget))
}

// Wait mocks base method
func (m *MockRemoteOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockRemoteOperationMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemoteOperation)(nil).Wait))
}

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// GetConnectionInfo mocks base method
func (m *MockServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo
func (mr *MockServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method
func (m *MockServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient
func (mr *MockServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockServer)(nil).GetHTTPClient))
}

// Disconnect mocks base method
func (m *MockServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockServer)(nil).Disconnect))
}

// MockImageServer is a mock of ImageServer interface
type MockImageServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServerMockRecorder
}

// MockImageServerMockRecorder is the mock recorder for MockImageServer
type MockImageServerMockRecorder struct {
	mock *MockImageServer
}

// NewMockImageServer creates a new mock instance
func NewMockImageServer(ctrl *gomock.Controller) *MockImageServer {
	mock := &MockImageServer{ctrl: ctrl}
	mock.recorder = &MockImageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageServer) EXPECT() *MockImageServerMockRecorder {
	return m.recorder
}

// GetConnectionInfo mocks base method
func (m *MockImageServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo
func (mr *MockImageServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockImageServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method
func (m *MockImageServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient
func (mr *MockImageServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockImageServer)(nil).GetHTTPClient))
}

// Disconnect mocks base method
func (m *MockImageServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockImageServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockImageServer)(nil).Disconnect))
}

// GetImages mocks base method
func (m *MockImageServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockImageServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockImageServer)(nil).GetImages))
}

// GetImageFingerprints mocks base method
func (m *MockImageServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints
func (mr *MockImageServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockImageServer)(nil).GetImageFingerprints))
}

// GetImage mocks base method
func (m *MockImageServer) GetImage(fingerprint string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", fingerprint)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage
func (mr *MockImageServerMockRecorder) GetImage(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageServer)(nil).GetImage), fingerprint)
}

// GetImageFile mocks base method
func (m *MockImageServer) GetImageFile(fingerprint string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", fingerprint, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile
func (mr *MockImageServerMockRecorder) GetImageFile(fingerprint, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockImageServer)(nil).GetImageFile), fingerprint, req)
}

// GetImageSecret mocks base method
func (m *MockImageServer) GetImageSecret(fingerprint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", fingerprint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret
func (mr *MockImageServerMockRecorder) GetImageSecret(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockImageServer)(nil).GetImageSecret), fingerprint)
}

// GetPrivateImage mocks base method
func (m *MockImageServer) GetPrivateImage(fingerprint, secret string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", fingerprint, secret)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage
func (mr *MockImageServerMockRecorder) GetPrivateImage(fingerprint, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImage), fingerprint, secret)
}

// GetPrivateImageFile mocks base method
func (m *MockImageServer) GetPrivateImageFile(fingerprint, secret string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", fingerprint, secret, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile
func (mr *MockImageServerMockRecorder) GetPrivateImageFile(fingerprint, secret, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImageFile), fingerprint, secret, req)
}

// GetImageAliases mocks base method
func (m *MockImageServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases
func (mr *MockImageServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockImageServer)(nil).GetImageAliases))
}

// GetImageAliasNames mocks base method
func (m *MockImageServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames
func (mr *MockImageServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasNames))
}

// GetImageAlias mocks base method
func (m *MockImageServer) GetImageAlias(name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias
func (mr *MockImageServerMockRecorder) GetImageAlias(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockImageServer)(nil).GetImageAlias), name)
}

// GetImageAliasType mocks base method
func (m *MockImageServer) GetImageAliasType(imageType, name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", imageType, name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType
func (mr *MockImageServerMockRecorder) GetImageAliasType(imageType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasType), imageType, name)
}

// GetImageAliasArchitectures mocks base method
func (m *MockImageServer) GetImageAliasArchitectures(imageType, name string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", imageType, name)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures
func (mr *MockImageServerMockRecorder) GetImageAliasArchitectures(imageType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasArchitectures), imageType, name)
}

// ExportImage mocks base method
func (m *MockImageServer) ExportImage(fingerprint string, image api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", fingerprint, image)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage
func (mr *MockImageServerMockRecorder) ExportImage(fingerprint, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockImageServer)(nil).ExportImage), fingerprint, image)
}

// MockInstanceServer is a mock of InstanceServer interface
type MockInstanceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServerMockRecorder
}

// MockInstanceServerMockRecorder is the mock recorder for MockInstanceServer
type MockInstanceServerMockRecorder struct {
	mock *MockInstanceServer
}

// NewMockInstanceServer creates a new mock instance
func NewMockInstanceServer(ctrl *gomock.Controller) *MockInstanceServer {
	mock := &MockInstanceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceServer) EXPECT() *MockInstanceServerMockRecorder {
	return m.recorder
}

// GetConnectionInfo mocks base method
func (m *MockInstanceServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo
func (mr *MockInstanceServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method
func (m *MockInstanceServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient
func (mr *MockInstanceServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockInstanceServer)(nil).GetHTTPClient))
}

// Disconnect mocks base method
func (m *MockInstanceServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockInstanceServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockInstanceServer)(nil).Disconnect))
}

// GetImages mocks base method
func (m *MockInstanceServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockInstanceServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockInstanceServer)(nil).GetImages))
}

// GetImageFingerprints mocks base method
func (m *MockInstanceServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints
func (mr *MockInstanceServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFingerprints))
}

// GetImage mocks base method
func (m *MockInstanceServer) GetImage(fingerprint string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", fingerprint)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage
func (mr *MockInstanceServerMockRecorder) GetImage(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockInstanceServer)(nil).GetImage), fingerprint)
}

// GetImageFile mocks base method
func (m *MockInstanceServer) GetImageFile(fingerprint string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", fingerprint, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile
func (mr *MockInstanceServerMockRecorder) GetImageFile(fingerprint, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFile), fingerprint, req)
}

// GetImageSecret mocks base method
func (m *MockInstanceServer) GetImageSecret(fingerprint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", fingerprint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret
func (mr *MockInstanceServerMockRecorder) GetImageSecret(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetImageSecret), fingerprint)
}

// GetPrivateImage mocks base method
func (m *MockInstanceServer) GetPrivateImage(fingerprint, secret string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", fingerprint, secret)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage
func (mr *MockInstanceServerMockRecorder) GetPrivateImage(fingerprint, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImage), fingerprint, secret)
}

// GetPrivateImageFile mocks base method
func (m *MockInstanceServer) GetPrivateImageFile(fingerprint, secret string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", fingerprint, secret, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile
func (mr *MockInstanceServerMockRecorder) GetPrivateImageFile(fingerprint, secret, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImageFile), fingerprint, secret, req)
}

// GetImageAliases mocks base method
func (m *MockInstanceServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases
func (mr *MockInstanceServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliases))
}

// GetImageAliasNames mocks base method
func (m *MockInstanceServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames
func (mr *MockInstanceServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasNames))
}

// GetImageAlias mocks base method
func (m *MockInstanceServer) GetImageAlias(name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias
func (mr *MockInstanceServerMockRecorder) GetImageAlias(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAlias), name)
}

// GetImageAliasType mocks base method
func (m *MockInstanceServer) GetImageAliasType(imageType, name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", imageType, name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType
func (mr *MockInstanceServerMockRecorder) GetImageAliasType(imageType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasType), imageType, name)
}

// GetImageAliasArchitectures mocks base method
func (m *MockInstanceServer) GetImageAliasArchitectures(imageType, name string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", imageType, name)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures
func (mr *MockInstanceServerMockRecorder) GetImageAliasArchitectures(imageType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasArchitectures), imageType, name)
}

// ExportImage mocks base method
func (m *MockInstanceServer) ExportImage(fingerprint string, image api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", fingerprint, image)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage
func (mr *MockInstanceServerMockRecorder) ExportImage(fingerprint, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockInstanceServer)(nil).ExportImage), fingerprint, image)
}

// GetServer mocks base method
func (m *MockInstanceServer) GetServer() (*api.Server, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*api.Server)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServer indicates an expected call of GetServer
func (mr *MockInstanceServerMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInstanceServer)(nil).GetServer))
}

// GetServerResources mocks base method
func (m *MockInstanceServer) GetServerResources() (*api.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerResources")
	ret0, _ := ret[0].(*api.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerResources indicates an expected call of GetServerResources
func (mr *MockInstanceServerMockRecorder) GetServerResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerResources", reflect.TypeOf((*MockInstanceServer)(nil).GetServerResources))
}

// UpdateServer mocks base method
func (m *MockInstanceServer) UpdateServer(server api.ServerPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", server, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer
func (mr *MockInstanceServerMockRecorder) UpdateServer(server, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateServer), server, ETag)
}

// HasExtension mocks base method
func (m *MockInstanceServer) HasExtension(extension string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExtension", extension)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExtension indicates an expected call of HasExtension
func (mr *MockInstanceServerMockRecorder) HasExtension(extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExtension", reflect.TypeOf((*MockInstanceServer)(nil).HasExtension), extension)
}

// RequireAuthenticated mocks base method
func (m *MockInstanceServer) RequireAuthenticated(authenticated bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequireAuthenticated", authenticated)
}

// RequireAuthenticated indicates an expected call of RequireAuthenticated
func (mr *MockInstanceServerMockRecorder) RequireAuthenticated(authenticated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticated", reflect.TypeOf((*MockInstanceServer)(nil).RequireAuthenticated), authenticated)
}

// IsClustered mocks base method
func (m *MockInstanceServer) IsClustered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClustered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClustered indicates an expected call of IsClustered
func (mr *MockInstanceServerMockRecorder) IsClustered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClustered", reflect.TypeOf((*MockInstanceServer)(nil).IsClustered))
}

// UseTarget mocks base method
func (m *MockInstanceServer) UseTarget(name string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTarget", name)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseTarget indicates an expected call of UseTarget
func (mr *MockInstanceServerMockRecorder) UseTarget(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTarget", reflect.TypeOf((*MockInstanceServer)(nil).UseTarget), name)
}

// UseProject mocks base method
func (m *MockInstanceServer) UseProject(name string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseProject", name)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseProject indicates an expected call of UseProject
func (mr *MockInstanceServerMockRecorder) UseProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseProject", reflect.TypeOf((*MockInstanceServer)(nil).UseProject), name)
}

// GetCertificateFingerprints mocks base method
func (m *MockInstanceServer) GetCertificateFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFingerprints indicates an expected call of GetCertificateFingerprints
func (mr *MockInstanceServerMockRecorder) GetCertificateFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificateFingerprints))
}

// GetCertificates mocks base method
func (m *MockInstanceServer) GetCertificates() ([]api.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]api.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates
func (mr *MockInstanceServerMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificates))
}

// GetCertificate mocks base method
func (m *MockInstanceServer) GetCertificate(fingerprint string) (*api.Certificate, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", fingerprint)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate
func (mr *MockInstanceServerMockRecorder) GetCertificate(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificate), fingerprint)
}

// CreateCertificate mocks base method
func (m *MockInstanceServer) CreateCertificate(certificate api.CertificatesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", certificate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate
func (mr *MockInstanceServerMockRecorder) CreateCertificate(certificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificate), certificate)
}

// UpdateCertificate mocks base method
func (m *MockInstanceServer) UpdateCertificate(fingerprint string, certificate api.CertificatePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", fingerprint, certificate, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificate indicates an expected call of UpdateCertificate
func (mr *MockInstanceServerMockRecorder) UpdateCertificate(fingerprint, certificate, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCertificate), fingerprint, certificate, ETag)
}

// DeleteCertificate mocks base method
func (m *MockInstanceServer) DeleteCertificate(fingerprint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", fingerprint)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockInstanceServerMockRecorder) DeleteCertificate(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockInstanceServer)(nil).DeleteCertificate), fingerprint)
}

// GetContainerNames mocks base method
func (m *MockInstanceServer) GetContainerNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerNames indicates an expected call of GetContainerNames
func (mr *MockInstanceServerMockRecorder) GetContainerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerNames))
}

// GetContainers mocks base method
func (m *MockInstanceServer) GetContainers() ([]api.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]api.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers
func (mr *MockInstanceServerMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockInstanceServer)(nil).GetContainers))
}

// GetContainersFull mocks base method
func (m *MockInstanceServer) GetContainersFull() ([]api.ContainerFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersFull")
	ret0, _ := ret[0].([]api.ContainerFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersFull indicates an expected call of GetContainersFull
func (mr *MockInstanceServerMockRecorder) GetContainersFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersFull", reflect.TypeOf((*MockInstanceServer)(nil).GetContainersFull))
}

// GetContainer mocks base method
func (m *MockInstanceServer) GetContainer(name string) (*api.Container, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", name)
	ret0, _ := ret[0].(*api.Container)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainer indicates an expected call of GetContainer
func (mr *MockInstanceServerMockRecorder) GetContainer(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockInstanceServer)(nil).GetContainer), name)
}

// CreateContainer mocks base method
func (m *MockInstanceServer) CreateContainer(container api.ContainersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer
func (mr *MockInstanceServerMockRecorder) CreateContainer(container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainer), container)
}

// CreateContainerFromImage mocks base method
func (m *MockInstanceServer) CreateContainerFromImage(source lxd.ImageServer, image api.Image, imgcontainer api.ContainersPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromImage", source, image, imgcontainer)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromImage indicates an expected call of CreateContainerFromImage
func (mr *MockInstanceServerMockRecorder) CreateContainerFromImage(source, image, imgcontainer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromImage), source, image, imgcontainer)
}

// CopyContainer mocks base method
func (m *MockInstanceServer) CopyContainer(source lxd.InstanceServer, container api.Container, args *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainer", source, container, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainer indicates an expected call of CopyContainer
func (mr *MockInstanceServerMockRecorder) CopyContainer(source, container, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainer", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainer), source, container, args)
}

// UpdateContainer mocks base method
func (m *MockInstanceServer) UpdateContainer(name string, container api.ContainerPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", name, container, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer
func (mr *MockInstanceServerMockRecorder) UpdateContainer(name, container, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainer), name, container, ETag)
}

// RenameContainer mocks base method
func (m *MockInstanceServer) RenameContainer(name string, container api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainer", name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainer indicates an expected call of RenameContainer
func (mr *MockInstanceServerMockRecorder) RenameContainer(name, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainer", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainer), name, container)
}

// MigrateContainer mocks base method
func (m *MockInstanceServer) MigrateContainer(name string, container api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainer", name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainer indicates an expected call of MigrateContainer
func (mr *MockInstanceServerMockRecorder) MigrateContainer(name, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainer", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainer), name, container)
}

// DeleteContainer mocks base method
func (m *MockInstanceServer) DeleteContainer(name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainer indicates an expected call of DeleteContainer
func (mr *MockInstanceServerMockRecorder) DeleteContainer(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainer), name)
}

// ExecContainer mocks base method
func (m *MockInstanceServer) ExecContainer(containerName string, exec api.ContainerExecPost, args *lxd.ContainerExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContainer", containerName, exec, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContainer indicates an expected call of ExecContainer
func (mr *MockInstanceServerMockRecorder) ExecContainer(containerName, exec, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContainer", reflect.TypeOf((*MockInstanceServer)(nil).ExecContainer), containerName, exec, args)
}

// ConsoleContainer mocks base method
func (m *MockInstanceServer) ConsoleContainer(containerName string, console api.ContainerConsolePost, args *lxd.ContainerConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleContainer", containerName, console, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleContainer indicates an expected call of ConsoleContainer
func (mr *MockInstanceServerMockRecorder) ConsoleContainer(containerName, console, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleContainer", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleContainer), containerName, console, args)
}

// GetContainerConsoleLog mocks base method
func (m *MockInstanceServer) GetContainerConsoleLog(containerName string, args *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerConsoleLog", containerName, args)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerConsoleLog indicates an expected call of GetContainerConsoleLog
func (mr *MockInstanceServerMockRecorder) GetContainerConsoleLog(containerName, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerConsoleLog), containerName, args)
}

// DeleteContainerConsoleLog mocks base method
func (m *MockInstanceServer) DeleteContainerConsoleLog(containerName string, args *lxd.ContainerConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerConsoleLog", containerName, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerConsoleLog indicates an expected call of DeleteContainerConsoleLog
func (mr *MockInstanceServerMockRecorder) DeleteContainerConsoleLog(containerName, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerConsoleLog), containerName, args)
}

// GetContainerFile mocks base method
func (m *MockInstanceServer) GetContainerFile(containerName, path string) (io.ReadCloser, *lxd.ContainerFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerFile", containerName, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.ContainerFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerFile indicates an expected call of GetContainerFile
func (mr *MockInstanceServerMockRecorder) GetContainerFile(containerName, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerFile), containerName, path)
}

// CreateContainerFile mocks base method
func (m *MockInstanceServer) CreateContainerFile(containerName, path string, args lxd.ContainerFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFile", containerName, path, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerFile indicates an expected call of CreateContainerFile
func (mr *MockInstanceServerMockRecorder) CreateContainerFile(containerName, path, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFile), containerName, path, args)
}

// DeleteContainerFile mocks base method
func (m *MockInstanceServer) DeleteContainerFile(containerName, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerFile", containerName, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerFile indicates an expected call of DeleteContainerFile
func (mr *MockInstanceServerMockRecorder) DeleteContainerFile(containerName, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerFile), containerName, path)
}

// GetContainerSnapshotNames mocks base method
func (m *MockInstanceServer) GetContainerSnapshotNames(containerName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshotNames", containerName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshotNames indicates an expected call of GetContainerSnapshotNames
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshotNames(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshotNames), containerName)
}

// GetContainerSnapshots mocks base method
func (m *MockInstanceServer) GetContainerSnapshots(containerName string) ([]api.ContainerSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshots", containerName)
	ret0, _ := ret[0].([]api.ContainerSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshots indicates an expected call of GetContainerSnapshots
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshots(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshots), containerName)
}

// GetContainerSnapshot mocks base method
func (m *MockInstanceServer) GetContainerSnapshot(containerName, name string) (*api.ContainerSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshot", containerName, name)
	ret0, _ := ret[0].(*api.ContainerSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSnapshot indicates an expected call of GetContainerSnapshot
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshot(containerName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshot), containerName, name)
}

// CreateContainerSnapshot mocks base method
func (m *MockInstanceServer) CreateContainerSnapshot(containerName string, snapshot api.ContainerSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerSnapshot", containerName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerSnapshot indicates an expected call of CreateContainerSnapshot
func (mr *MockInstanceServerMockRecorder) CreateContainerSnapshot(containerName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerSnapshot), containerName, snapshot)
}

// CopyContainerSnapshot mocks base method
func (m *MockInstanceServer) CopyContainerSnapshot(source lxd.InstanceServer, containerName string, snapshot api.ContainerSnapshot, args *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainerSnapshot", source, containerName, snapshot, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainerSnapshot indicates an expected call of CopyContainerSnapshot
func (mr *MockInstanceServerMockRecorder) CopyContainerSnapshot(source, containerName, snapshot, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainerSnapshot), source, containerName, snapshot, args)
}

// RenameContainerSnapshot mocks base method
func (m *MockInstanceServer) RenameContainerSnapshot(containerName, name string, container api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerSnapshot", containerName, name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerSnapshot indicates an expected call of RenameContainerSnapshot
func (mr *MockInstanceServerMockRecorder) RenameContainerSnapshot(containerName, name, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerSnapshot), containerName, name, container)
}

// MigrateContainerSnapshot mocks base method
func (m *MockInstanceServer) MigrateContainerSnapshot(containerName, name string, container api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainerSnapshot", containerName, name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainerSnapshot indicates an expected call of MigrateContainerSnapshot
func (mr *MockInstanceServerMockRecorder) MigrateContainerSnapshot(containerName, name, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainerSnapshot), containerName, name, container)
}

// DeleteContainerSnapshot mocks base method
func (m *MockInstanceServer) DeleteContainerSnapshot(containerName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerSnapshot", containerName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerSnapshot indicates an expected call of DeleteContainerSnapshot
func (mr *MockInstanceServerMockRecorder) DeleteContainerSnapshot(containerName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerSnapshot), containerName, name)
}

// UpdateContainerSnapshot mocks base method
func (m *MockInstanceServer) UpdateContainerSnapshot(containerName, name string, container api.ContainerSnapshotPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerSnapshot", containerName, name, container, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerSnapshot indicates an expected call of UpdateContainerSnapshot
func (mr *MockInstanceServerMockRecorder) UpdateContainerSnapshot(containerName, name, container, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerSnapshot), containerName, name, container, ETag)
}

// GetContainerBackupNames mocks base method
func (m *MockInstanceServer) GetContainerBackupNames(containerName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupNames", containerName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupNames indicates an expected call of GetContainerBackupNames
func (mr *MockInstanceServerMockRecorder) GetContainerBackupNames(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupNames), containerName)
}

// GetContainerBackups mocks base method
func (m *MockInstanceServer) GetContainerBackups(containername string) ([]api.ContainerBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackups", containername)
	ret0, _ := ret[0].([]api.ContainerBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackups indicates an expected call of GetContainerBackups
func (mr *MockInstanceServerMockRecorder) GetContainerBackups(containername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackups), containername)
}

// GetContainerBackup mocks base method
func (m *MockInstanceServer) GetContainerBackup(containerName, name string) (*api.ContainerBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackup", containerName, name)
	ret0, _ := ret[0].(*api.ContainerBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerBackup indicates an expected call of GetContainerBackup
func (mr *MockInstanceServerMockRecorder) GetContainerBackup(containerName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackup), containerName, name)
}

// CreateContainerBackup mocks base method
func (m *MockInstanceServer) CreateContainerBackup(containerName string, backup api.ContainerBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerBackup", containerName, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerBackup indicates an expected call of CreateContainerBackup
func (mr *MockInstanceServerMockRecorder) CreateContainerBackup(containerName, backup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerBackup), containerName, backup)
}

// RenameContainerBackup mocks base method
func (m *MockInstanceServer) RenameContainerBackup(containerName, name string, backup api.ContainerBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerBackup", containerName, name, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerBackup indicates an expected call of RenameContainerBackup
func (mr *MockInstanceServerMockRecorder) RenameContainerBackup(containerName, name, backup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerBackup), containerName, name, backup)
}

// DeleteContainerBackup mocks base method
func (m *MockInstanceServer) DeleteContainerBackup(containerName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerBackup", containerName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerBackup indicates an expected call of DeleteContainerBackup
func (mr *MockInstanceServerMockRecorder) DeleteContainerBackup(containerName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerBackup), containerName, name)
}

// GetContainerBackupFile mocks base method
func (m *MockInstanceServer) GetContainerBackupFile(containerName, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupFile", containerName, name, req)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupFile indicates an expected call of GetContainerBackupFile
func (mr *MockInstanceServerMockRecorder) GetContainerBackupFile(containerName, name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupFile), containerName, name, req)
}

// CreateContainerFromBackup mocks base method
func (m *MockInstanceServer) CreateContainerFromBackup(args lxd.ContainerBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromBackup", args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromBackup indicates an expected call of CreateContainerFromBackup
func (mr *MockInstanceServerMockRecorder) CreateContainerFromBackup(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromBackup), args)
}

// GetContainerState mocks base method
func (m *MockInstanceServer) GetContainerState(name string) (*api.ContainerState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerState", name)
	ret0, _ := ret[0].(*api.ContainerState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerState indicates an expected call of GetContainerState
func (mr *MockInstanceServerMockRecorder) GetContainerState(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerState", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerState), name)
}

// UpdateContainerState mocks base method
func (m *MockInstanceServer) UpdateContainerState(name string, state api.ContainerStatePut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerState", name, state, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerState indicates an expected call of UpdateContainerState
func (mr *MockInstanceServerMockRecorder) UpdateContainerState(name, state, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerState), name, state, ETag)
}

// GetContainerLogfiles mocks base method
func (m *MockInstanceServer) GetContainerLogfiles(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfiles", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfiles indicates an expected call of GetContainerLogfiles
func (mr *MockInstanceServerMockRecorder) GetContainerLogfiles(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfiles), name)
}

// GetContainerLogfile mocks base method
func (m *MockInstanceServer) GetContainerLogfile(name, filename string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfile", name, filename)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfile indicates an expected call of GetContainerLogfile
func (mr *MockInstanceServerMockRecorder) GetContainerLogfile(name, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfile), name, filename)
}

// DeleteContainerLogfile mocks base method
func (m *MockInstanceServer) DeleteContainerLogfile(name, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerLogfile", name, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerLogfile indicates an expected call of DeleteContainerLogfile
func (mr *MockInstanceServerMockRecorder) DeleteContainerLogfile(name, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerLogfile), name, filename)
}

// GetContainerMetadata mocks base method
func (m *MockInstanceServer) GetContainerMetadata(name string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetadata", name)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerMetadata indicates an expected call of GetContainerMetadata
func (mr *MockInstanceServerMockRecorder) GetContainerMetadata(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerMetadata), name)
}

// SetContainerMetadata mocks base method
func (m *MockInstanceServer) SetContainerMetadata(name string, metadata api.ImageMetadata, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerMetadata", name, metadata, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerMetadata indicates an expected call of SetContainerMetadata
func (mr *MockInstanceServerMockRecorder) SetContainerMetadata(name, metadata, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetContainerMetadata), name, metadata, ETag)
}

// GetContainerTemplateFiles mocks base method
func (m *MockInstanceServer) GetContainerTemplateFiles(containerName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFiles", containerName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFiles indicates an expected call of GetContainerTemplateFiles
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFiles(containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFiles), containerName)
}

// GetContainerTemplateFile mocks base method
func (m *MockInstanceServer) GetContainerTemplateFile(containerName, templateName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFile", containerName, templateName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFile indicates an expected call of GetContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFile(containerName, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFile), containerName, templateName)
}

// CreateContainerTemplateFile mocks base method
func (m *MockInstanceServer) CreateContainerTemplateFile(containerName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerTemplateFile", containerName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerTemplateFile indicates an expected call of CreateContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) CreateContainerTemplateFile(containerName, templateName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerTemplateFile), containerName, templateName, content)
}

// UpdateContainerTemplateFile mocks base method
func (m *MockInstanceServer) UpdateContainerTemplateFile(containerName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerTemplateFile", containerName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerTemplateFile indicates an expected call of UpdateContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) UpdateContainerTemplateFile(containerName, templateName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerTemplateFile), containerName, templateName, content)
}

// DeleteContainerTemplateFile mocks base method
func (m *MockInstanceServer) DeleteContainerTemplateFile(name, templateName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerTemplateFile", name, templateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerTemplateFile indicates an expected call of DeleteContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) DeleteContainerTemplateFile(name, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerTemplateFile), name, templateName)
}

// GetInstanceNames mocks base method
func (m *MockInstanceServer) GetInstanceNames(instanceType api.InstanceType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNames", instanceType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNames indicates an expected call of GetInstanceNames
func (mr *MockInstanceServerMockRecorder) GetInstanceNames(instanceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNames), instanceType)
}

// GetInstances mocks base method
func (m *MockInstanceServer) GetInstances(instanceType api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", instanceType)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances
func (mr *MockInstanceServerMockRecorder) GetInstances(instanceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockInstanceServer)(nil).GetInstances), instanceType)
}

// GetInstancesFull mocks base method
func (m *MockInstanceServer) GetInstancesFull(instanceType api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFull", instanceType)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFull indicates an expected call of GetInstancesFull
func (mr *MockInstanceServerMockRecorder) GetInstancesFull(instanceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFull), instanceType)
}

// GetInstance mocks base method
func (m *MockInstanceServer) GetInstance(name string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", name)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockInstanceServerMockRecorder) GetInstance(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceServer)(nil).GetInstance), name)
}

// CreateInstance mocks base method
func (m *MockInstanceServer) CreateInstance(instance api.InstancesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockInstanceServerMockRecorder) CreateInstance(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstance), instance)
}

// CreateInstanceFromImage mocks base method
func (m *MockInstanceServer) CreateInstanceFromImage(source lxd.ImageServer, image api.Image, req api.InstancesPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromImage", source, image, req)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromImage indicates an expected call of CreateInstanceFromImage
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromImage(source, image, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromImage), source, image, req)
}

// CopyInstance mocks base method
func (m *MockInstanceServer) CopyInstance(source lxd.InstanceServer, instance api.Instance, args *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstance", source, instance, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstance indicates an expected call of CopyInstance
func (mr *MockInstanceServerMockRecorder) CopyInstance(source, instance, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstance", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstance), source, instance, args)
}

// UpdateInstance mocks base method
func (m *MockInstanceServer) UpdateInstance(name string, instance api.InstancePut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", name, instance, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance
func (mr *MockInstanceServerMockRecorder) UpdateInstance(name, instance, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstance), name, instance, ETag)
}

// RenameInstance mocks base method
func (m *MockInstanceServer) RenameInstance(name string, instance api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstance", name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstance indicates an expected call of RenameInstance
func (mr *MockInstanceServerMockRecorder) RenameInstance(name, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstance", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstance), name, instance)
}

// MigrateInstance mocks base method
func (m *MockInstanceServer) MigrateInstance(name string, instance api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstance", name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstance indicates an expected call of MigrateInstance
func (mr *MockInstanceServerMockRecorder) MigrateInstance(name, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstance", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstance), name, instance)
}

// DeleteInstance mocks base method
func (m *MockInstanceServer) DeleteInstance(name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockInstanceServerMockRecorder) DeleteInstance(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstance), name)
}

// ExecInstance mocks base method
func (m *MockInstanceServer) ExecInstance(instanceName string, exec api.InstanceExecPost, args *lxd.InstanceExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInstance", instanceName, exec, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecInstance indicates an expected call of ExecInstance
func (mr *MockInstanceServerMockRecorder) ExecInstance(instanceName, exec, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInstance", reflect.TypeOf((*MockInstanceServer)(nil).ExecInstance), instanceName, exec, args)
}

// ConsoleInstance mocks base method
func (m *MockInstanceServer) ConsoleInstance(instanceName string, console api.InstanceConsolePost, args *lxd.InstanceConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstance", instanceName, console, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleInstance indicates an expected call of ConsoleInstance
func (mr *MockInstanceServerMockRecorder) ConsoleInstance(instanceName, console, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstance", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstance), instanceName, console, args)
}

// ConsoleInstanceDynamic mocks base method
func (m *MockInstanceServer) ConsoleInstanceDynamic(instanceName string, console api.InstanceConsolePost, args *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstanceDynamic", instanceName, console, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(func(io.ReadWriteCloser) error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConsoleInstanceDynamic indicates an expected call of ConsoleInstanceDynamic
func (mr *MockInstanceServerMockRecorder) ConsoleInstanceDynamic(instanceName, console, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstanceDynamic", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstanceDynamic), instanceName, console, args)
}

// GetInstanceConsoleLog mocks base method
func (m *MockInstanceServer) GetInstanceConsoleLog(instanceName string, args *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceConsoleLog", instanceName, args)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceConsoleLog indicates an expected call of GetInstanceConsoleLog
func (mr *MockInstanceServerMockRecorder) GetInstanceConsoleLog(instanceName, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceConsoleLog), instanceName, args)
}

// DeleteInstanceConsoleLog mocks base method
func (m *MockInstanceServer) DeleteInstanceConsoleLog(instanceName string, args *lxd.InstanceConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceConsoleLog", instanceName, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceConsoleLog indicates an expected call of DeleteInstanceConsoleLog
func (mr *MockInstanceServerMockRecorder) DeleteInstanceConsoleLog(instanceName, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceConsoleLog), instanceName, args)
}

// GetInstanceFile mocks base method
func (m *MockInstanceServer) GetInstanceFile(instanceName, path string) (io.ReadCloser, *lxd.InstanceFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFile", instanceName, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.InstanceFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFile indicates an expected call of GetInstanceFile
func (mr *MockInstanceServerMockRecorder) GetInstanceFile(instanceName, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFile), instanceName, path)
}

// CreateInstanceFile mocks base method
func (m *MockInstanceServer) CreateInstanceFile(instanceName, path string, args lxd.InstanceFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFile", instanceName, path, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceFile indicates an expected call of CreateInstanceFile
func (mr *MockInstanceServerMockRecorder) CreateInstanceFile(instanceName, path, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFile), instanceName, path, args)
}

// DeleteInstanceFile mocks base method
func (m *MockInstanceServer) DeleteInstanceFile(instanceName, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceFile", instanceName, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceFile indicates an expected call of DeleteInstanceFile
func (mr *MockInstanceServerMockRecorder) DeleteInstanceFile(instanceName, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceFile), instanceName, path)
}

// GetInstanceSnapshotNames mocks base method
func (m *MockInstanceServer) GetInstanceSnapshotNames(instanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotNames", instanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotNames indicates an expected call of GetInstanceSnapshotNames
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshotNames(instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshotNames), instanceName)
}

// GetInstanceSnapshots mocks base method
func (m *MockInstanceServer) GetInstanceSnapshots(instanceName string) ([]api.InstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", instanceName)
	ret0, _ := ret[0].([]api.InstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshots(instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshots), instanceName)
}

// GetInstanceSnapshot mocks base method
func (m *MockInstanceServer) GetInstanceSnapshot(instanceName, name string) (*api.InstanceSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", instanceName, name)
	ret0, _ := ret[0].(*api.InstanceSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshot(instanceName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshot), instanceName, name)
}

// CreateInstanceSnapshot mocks base method
func (m *MockInstanceServer) CreateInstanceSnapshot(instanceName string, snapshot api.InstanceSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshot", instanceName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshot indicates an expected call of CreateInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) CreateInstanceSnapshot(instanceName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceSnapshot), instanceName, snapshot)
}

// CopyInstanceSnapshot mocks base method
func (m *MockInstanceServer) CopyInstanceSnapshot(source lxd.InstanceServer, instanceName string, snapshot api.InstanceSnapshot, args *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstanceSnapshot", source, instanceName, snapshot, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstanceSnapshot indicates an expected call of CopyInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) CopyInstanceSnapshot(source, instanceName, snapshot, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstanceSnapshot), source, instanceName, snapshot, args)
}

// RenameInstanceSnapshot mocks base method
func (m *MockInstanceServer) RenameInstanceSnapshot(instanceName, name string, instance api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceSnapshot", instanceName, name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceSnapshot indicates an expected call of RenameInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) RenameInstanceSnapshot(instanceName, name, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceSnapshot), instanceName, name, instance)
}

// MigrateInstanceSnapshot mocks base method
func (m *MockInstanceServer) MigrateInstanceSnapshot(instanceName, name string, instance api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstanceSnapshot", instanceName, name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstanceSnapshot indicates an expected call of MigrateInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) MigrateInstanceSnapshot(instanceName, name, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstanceSnapshot), instanceName, name, instance)
}

// DeleteInstanceSnapshot mocks base method
func (m *MockInstanceServer) DeleteInstanceSnapshot(instanceName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshot", instanceName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshot indicates an expected call of DeleteInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) DeleteInstanceSnapshot(instanceName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceSnapshot), instanceName, name)
}

// UpdateInstanceSnapshot mocks base method
func (m *MockInstanceServer) UpdateInstanceSnapshot(instanceName, name string, instance api.InstanceSnapshotPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceSnapshot", instanceName, name, instance, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceSnapshot indicates an expected call of UpdateInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) UpdateInstanceSnapshot(instanceName, name, instance, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceSnapshot), instanceName, name, instance, ETag)
}

// GetInstanceBackupNames mocks base method
func (m *MockInstanceServer) GetInstanceBackupNames(instanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupNames", instanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupNames indicates an expected call of GetInstanceBackupNames
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupNames(instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupNames), instanceName)
}

// GetInstanceBackups mocks base method
func (m *MockInstanceServer) GetInstanceBackups(instanceName string) ([]api.InstanceBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackups", instanceName)
	ret0, _ := ret[0].([]api.InstanceBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackups indicates an expected call of GetInstanceBackups
func (mr *MockInstanceServerMockRecorder) GetInstanceBackups(instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackups), instanceName)
}

// GetInstanceBackup mocks base method
func (m *MockInstanceServer) GetInstanceBackup(instanceName, name string) (*api.InstanceBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackup", instanceName, name)
	ret0, _ := ret[0].(*api.InstanceBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceBackup indicates an expected call of GetInstanceBackup
func (mr *MockInstanceServerMockRecorder) GetInstanceBackup(instanceName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackup), instanceName, name)
}

// CreateInstanceBackup mocks base method
func (m *MockInstanceServer) CreateInstanceBackup(instanceName string, backup api.InstanceBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBackup", instanceName, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceBackup indicates an expected call of CreateInstanceBackup
func (mr *MockInstanceServerMockRecorder) CreateInstanceBackup(instanceName, backup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceBackup), instanceName, backup)
}

// RenameInstanceBackup mocks base method
func (m *MockInstanceServer) RenameInstanceBackup(instanceName, name string, backup api.InstanceBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceBackup", instanceName, name, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceBackup indicates an expected call of RenameInstanceBackup
func (mr *MockInstanceServerMockRecorder) RenameInstanceBackup(instanceName, name, backup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceBackup), instanceName, name, backup)
}

// DeleteInstanceBackup mocks base method
func (m *MockInstanceServer) DeleteInstanceBackup(instanceName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceBackup", instanceName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceBackup indicates an expected call of DeleteInstanceBackup
func (mr *MockInstanceServerMockRecorder) DeleteInstanceBackup(instanceName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceBackup), instanceName, name)
}

// GetInstanceBackupFile mocks base method
func (m *MockInstanceServer) GetInstanceBackupFile(instanceName, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupFile", instanceName, name, req)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupFile indicates an expected call of GetInstanceBackupFile
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupFile(instanceName, name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupFile), instanceName, name, req)
}

// CreateInstanceFromBackup mocks base method
func (m *MockInstanceServer) CreateInstanceFromBackup(args lxd.InstanceBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromBackup", args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromBackup indicates an expected call of CreateInstanceFromBackup
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromBackup(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromBackup), args)
}

// GetInstanceState mocks base method
func (m *MockInstanceServer) GetInstanceState(name string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", name)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceState indicates an expected call of GetInstanceState
func (mr *MockInstanceServerMockRecorder) GetInstanceState(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceState), name)
}

// UpdateInstanceState mocks base method
func (m *MockInstanceServer) UpdateInstanceState(name string, state api.InstanceStatePut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceState", name, state, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceState indicates an expected call of UpdateInstanceState
func (mr *MockInstanceServerMockRecorder) UpdateInstanceState(name, state, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceState), name, state, ETag)
}

// GetInstanceLogfiles mocks base method
func (m *MockInstanceServer) GetInstanceLogfiles(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfiles", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfiles indicates an expected call of GetInstanceLogfiles
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfiles(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfiles), name)
}

// GetInstanceLogfile mocks base method
func (m *MockInstanceServer) GetInstanceLogfile(name, filename string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfile", name, filename)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfile indicates an expected call of GetInstanceLogfile
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfile(name, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfile), name, filename)
}

// DeleteInstanceLogfile mocks base method
func (m *MockInstanceServer) DeleteInstanceLogfile(name, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceLogfile", name, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceLogfile indicates an expected call of DeleteInstanceLogfile
func (mr *MockInstanceServerMockRecorder) DeleteInstanceLogfile(name, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceLogfile), name, filename)
}

// GetInstanceMetadata mocks base method
func (m *MockInstanceServer) GetInstanceMetadata(name string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetadata", name)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceMetadata indicates an expected call of GetInstanceMetadata
func (mr *MockInstanceServerMockRecorder) GetInstanceMetadata(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceMetadata), name)
}

// SetInstanceMetadata mocks base method
func (m *MockInstanceServer) SetInstanceMetadata(name string, metadata api.ImageMetadata, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceMetadata", name, metadata, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceMetadata indicates an expected call of SetInstanceMetadata
func (mr *MockInstanceServerMockRecorder) SetInstanceMetadata(name, metadata, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetInstanceMetadata), name, metadata, ETag)
}

// GetInstanceTemplateFiles mocks base method
func (m *MockInstanceServer) GetInstanceTemplateFiles(instanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFiles", instanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFiles indicates an expected call of GetInstanceTemplateFiles
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFiles(instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFiles), instanceName)
}

// GetInstanceTemplateFile mocks base method
func (m *MockInstanceServer) GetInstanceTemplateFile(instanceName, templateName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFile", instanceName, templateName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFile indicates an expected call of GetInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFile(instanceName, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFile), instanceName, templateName)
}

// CreateInstanceTemplateFile mocks base method
func (m *MockInstanceServer) CreateInstanceTemplateFile(instanceName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceTemplateFile", instanceName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceTemplateFile indicates an expected call of CreateInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) CreateInstanceTemplateFile(instanceName, templateName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceTemplateFile), instanceName, templateName, content)
}

// UpdateInstanceTemplateFile mocks base method
func (m *MockInstanceServer) UpdateInstanceTemplateFile(instanceName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceTemplateFile", instanceName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceTemplateFile indicates an expected call of UpdateInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) UpdateInstanceTemplateFile(instanceName, templateName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceTemplateFile), instanceName, templateName, content)
}

// DeleteInstanceTemplateFile mocks base method
func (m *MockInstanceServer) DeleteInstanceTemplateFile(name, templateName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceTemplateFile", name, templateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceTemplateFile indicates an expected call of DeleteInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) DeleteInstanceTemplateFile(name, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceTemplateFile), name, templateName)
}

// GetEvents mocks base method
func (m *MockInstanceServer) GetEvents() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockInstanceServerMockRecorder) GetEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockInstanceServer)(nil).GetEvents))
}

// CreateImage mocks base method
func (m *MockInstanceServer) CreateImage(image api.ImagesPost, args *lxd.ImageCreateArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", image, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockInstanceServerMockRecorder) CreateImage(image, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateImage), image, args)
}

// CopyImage mocks base method
func (m *MockInstanceServer) CopyImage(source lxd.ImageServer, image api.Image, args *lxd.ImageCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", source, image, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage
func (mr *MockInstanceServerMockRecorder) CopyImage(source, image, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockInstanceServer)(nil).CopyImage), source, image, args)
}

// UpdateImage mocks base method
func (m *MockInstanceServer) UpdateImage(fingerprint string, image api.ImagePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", fingerprint, image, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage
func (mr *MockInstanceServerMockRecorder) UpdateImage(fingerprint, image, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImage), fingerprint, image, ETag)
}

// DeleteImage mocks base method
func (m *MockInstanceServer) DeleteImage(fingerprint string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", fingerprint)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockInstanceServerMockRecorder) DeleteImage(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImage), fingerprint)
}

// RefreshImage mocks base method
func (m *MockInstanceServer) RefreshImage(fingerprint string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshImage", fingerprint)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshImage indicates an expected call of RefreshImage
func (mr *MockInstanceServerMockRecorder) RefreshImage(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshImage", reflect.TypeOf((*MockInstanceServer)(nil).RefreshImage), fingerprint)
}

// CreateImageSecret mocks base method
func (m *MockInstanceServer) CreateImageSecret(fingerprint string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageSecret", fingerprint)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageSecret indicates an expected call of CreateImageSecret
func (mr *MockInstanceServerMockRecorder) CreateImageSecret(fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageSecret), fingerprint)
}

// CreateImageAlias mocks base method
func (m *MockInstanceServer) CreateImageAlias(alias api.ImageAliasesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlias", alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlias indicates an expected call of CreateImageAlias
func (mr *MockInstanceServerMockRecorder) CreateImageAlias(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageAlias), alias)
}

// UpdateImageAlias mocks base method
func (m *MockInstanceServer) UpdateImageAlias(name string, alias api.ImageAliasesEntryPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageAlias", name, alias, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageAlias indicates an expected call of UpdateImageAlias
func (mr *MockInstanceServerMockRecorder) UpdateImageAlias(name, alias, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImageAlias), name, alias, ETag)
}

// RenameImageAlias mocks base method
func (m *MockInstanceServer) RenameImageAlias(name string, alias api.ImageAliasesEntryPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameImageAlias", name, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameImageAlias indicates an expected call of RenameImageAlias
func (mr *MockInstanceServerMockRecorder) RenameImageAlias(name, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).RenameImageAlias), name, alias)
}

// DeleteImageAlias mocks base method
func (m *MockInstanceServer) DeleteImageAlias(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageAlias", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageAlias indicates an expected call of DeleteImageAlias
func (mr *MockInstanceServerMockRecorder) DeleteImageAlias(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImageAlias), name)
}

// GetNetworkNames mocks base method
func (m *MockInstanceServer) GetNetworkNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNames indicates an expected call of GetNetworkNames
func (mr *MockInstanceServerMockRecorder) GetNetworkNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkNames))
}

// GetNetworks mocks base method
func (m *MockInstanceServer) GetNetworks() ([]api.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks")
	ret0, _ := ret[0].([]api.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks
func (mr *MockInstanceServerMockRecorder) GetNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworks))
}

// GetNetwork mocks base method
func (m *MockInstanceServer) GetNetwork(name string) (*api.Network, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", name)
	ret0, _ := ret[0].(*api.Network)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetwork indicates an expected call of GetNetwork
func (mr *MockInstanceServerMockRecorder) GetNetwork(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockInstanceServer)(nil).GetNetwork), name)
}

// GetNetworkLeases mocks base method
func (m *MockInstanceServer) GetNetworkLeases(name string) ([]api.NetworkLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLeases", name)
	ret0, _ := ret[0].([]api.NetworkLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLeases indicates an expected call of GetNetworkLeases
func (mr *MockInstanceServerMockRecorder) GetNetworkLeases(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLeases", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLeases), name)
}

// GetNetworkState mocks base method
func (m *MockInstanceServer) GetNetworkState(name string) (*api.NetworkState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkState", name)
	ret0, _ := ret[0].(*api.NetworkState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkState indicates an expected call of GetNetworkState
func (mr *MockInstanceServerMockRecorder) GetNetworkState(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkState", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkState), name)
}

// CreateNetwork mocks base method
func (m *MockInstanceServer) CreateNetwork(network api.NetworksPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", network)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork
func (mr *MockInstanceServerMockRecorder) CreateNetwork(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetwork), network)
}

// UpdateNetwork mocks base method
func (m *MockInstanceServer) UpdateNetwork(name string, network api.NetworkPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", name, network, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetwork indicates an expected call of UpdateNetwork
func (mr *MockInstanceServerMockRecorder) UpdateNetwork(name, network, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetwork), name, network, ETag)
}

// RenameNetwork mocks base method
func (m *MockInstanceServer) RenameNetwork(name string, network api.NetworkPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetwork", name, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetwork indicates an expected call of RenameNetwork
func (mr *MockInstanceServerMockRecorder) RenameNetwork(name, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetwork", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetwork), name, network)
}

// DeleteNetwork mocks base method
func (m *MockInstanceServer) DeleteNetwork(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork
func (mr *MockInstanceServerMockRecorder) DeleteNetwork(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetwork), name)
}

// GetOperationUUIDs mocks base method
func (m *MockInstanceServer) GetOperationUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationUUIDs indicates an expected call of GetOperationUUIDs
func (mr *MockInstanceServerMockRecorder) GetOperationUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationUUIDs))
}

// GetOperations mocks base method
func (m *MockInstanceServer) GetOperations() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations
func (mr *MockInstanceServerMockRecorder) GetOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockInstanceServer)(nil).GetOperations))
}

// GetOperation mocks base method
func (m *MockInstanceServer) GetOperation(uuid string) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", uuid)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperation indicates an expected call of GetOperation
func (mr *MockInstanceServerMockRecorder) GetOperation(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInstanceServer)(nil).GetOperation), uuid)
}

// GetOperationWait mocks base method
func (m *MockInstanceServer) GetOperationWait(uuid string, timeout int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWait", uuid, timeout)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWait indicates an expected call of GetOperationWait
func (mr *MockInstanceServerMockRecorder) GetOperationWait(uuid, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWait", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWait), uuid, timeout)
}

// GetOperationWaitSecret mocks base method
func (m *MockInstanceServer) GetOperationWaitSecret(uuid, secret string, timeout int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWaitSecret", uuid, secret, timeout)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWaitSecret indicates an expected call of GetOperationWaitSecret
func (mr *MockInstanceServerMockRecorder) GetOperationWaitSecret(uuid, secret, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWaitSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWaitSecret), uuid, secret, timeout)
}

// GetOperationWebsocket mocks base method
func (m *MockInstanceServer) GetOperationWebsocket(uuid, secret string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWebsocket", uuid, secret)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWebsocket indicates an expected call of GetOperationWebsocket
func (mr *MockInstanceServerMockRecorder) GetOperationWebsocket(uuid, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWebsocket), uuid, secret)
}

// DeleteOperation mocks base method
func (m *MockInstanceServer) DeleteOperation(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation
func (mr *MockInstanceServerMockRecorder) DeleteOperation(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockInstanceServer)(nil).DeleteOperation), uuid)
}

// GetProfileNames mocks base method
func (m *MockInstanceServer) GetProfileNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNames indicates an expected call of GetProfileNames
func (mr *MockInstanceServerMockRecorder) GetProfileNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProfileNames))
}

// GetProfiles mocks base method
func (m *MockInstanceServer) GetProfiles() ([]api.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles")
	ret0, _ := ret[0].([]api.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles
func (mr *MockInstanceServerMockRecorder) GetProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetProfiles))
}

// GetProfile mocks base method
func (m *MockInstanceServer) GetProfile(name string) (*api.Profile, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", name)
	ret0, _ := ret[0].(*api.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockInstanceServerMockRecorder) GetProfile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockInstanceServer)(nil).GetProfile), name)
}

// CreateProfile mocks base method
func (m *MockInstanceServer) CreateProfile(profile api.ProfilesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockInstanceServerMockRecorder) CreateProfile(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockInstanceServer)(nil).CreateProfile), profile)
}

// UpdateProfile mocks base method
func (m *MockInstanceServer) UpdateProfile(name string, profile api.ProfilePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", name, profile, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockInstanceServerMockRecorder) UpdateProfile(name, profile, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProfile), name, profile, ETag)
}

// RenameProfile mocks base method
func (m *MockInstanceServer) RenameProfile(name string, profile api.ProfilePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProfile", name, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameProfile indicates an expected call of RenameProfile
func (mr *MockInstanceServerMockRecorder) RenameProfile(name, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProfile", reflect.TypeOf((*MockInstanceServer)(nil).RenameProfile), name, profile)
}

// DeleteProfile mocks base method
func (m *MockInstanceServer) DeleteProfile(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockInstanceServerMockRecorder) DeleteProfile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProfile), name)
}

// GetProjectNames mocks base method
func (m *MockInstanceServer) GetProjectNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNames indicates an expected call of GetProjectNames
func (mr *MockInstanceServerMockRecorder) GetProjectNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectNames))
}

// GetProjects mocks base method
func (m *MockInstanceServer) GetProjects() ([]api.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].([]api.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockInstanceServerMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetProjects))
}

// GetProject mocks base method
func (m *MockInstanceServer) GetProject(name string) (*api.Project, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", name)
	ret0, _ := ret[0].(*api.Project)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject
func (mr *MockInstanceServerMockRecorder) GetProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockInstanceServer)(nil).GetProject), name)
}

// CreateProject mocks base method
func (m *MockInstanceServer) CreateProject(project api.ProjectsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockInstanceServerMockRecorder) CreateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockInstanceServer)(nil).CreateProject), project)
}

// UpdateProject mocks base method
func (m *MockInstanceServer) UpdateProject(name string, project api.ProjectPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", name, project, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockInstanceServerMockRecorder) UpdateProject(name, project, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProject), name, project, ETag)
}

// RenameProject mocks base method
func (m *MockInstanceServer) RenameProject(name string, project api.ProjectPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProject", name, project)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameProject indicates an expected call of RenameProject
func (mr *MockInstanceServerMockRecorder) RenameProject(name, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProject", reflect.TypeOf((*MockInstanceServer)(nil).RenameProject), name, project)
}

// DeleteProject mocks base method
func (m *MockInstanceServer) DeleteProject(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockInstanceServerMockRecorder) DeleteProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProject), name)
}

// GetStoragePoolNames mocks base method
func (m *MockInstanceServer) GetStoragePoolNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolNames indicates an expected call of GetStoragePoolNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolNames))
}

// GetStoragePools mocks base method
func (m *MockInstanceServer) GetStoragePools() ([]api.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePools")
	ret0, _ := ret[0].([]api.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePools indicates an expected call of GetStoragePools
func (mr *MockInstanceServerMockRecorder) GetStoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePools", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePools))
}

// GetStoragePool mocks base method
func (m *MockInstanceServer) GetStoragePool(name string) (*api.StoragePool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", name)
	ret0, _ := ret[0].(*api.StoragePool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePool indicates an expected call of GetStoragePool
func (mr *MockInstanceServerMockRecorder) GetStoragePool(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePool), name)
}

// GetStoragePoolResources mocks base method
func (m *MockInstanceServer) GetStoragePoolResources(name string) (*api.ResourcesStoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolResources", name)
	ret0, _ := ret[0].(*api.ResourcesStoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolResources indicates an expected call of GetStoragePoolResources
func (mr *MockInstanceServerMockRecorder) GetStoragePoolResources(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolResources", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolResources), name)
}

// CreateStoragePool mocks base method
func (m *MockInstanceServer) CreateStoragePool(pool api.StoragePoolsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool
func (mr *MockInstanceServerMockRecorder) CreateStoragePool(pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePool), pool)
}

// UpdateStoragePool mocks base method
func (m *MockInstanceServer) UpdateStoragePool(name string, pool api.StoragePoolPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePool", name, pool, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePool indicates an expected call of UpdateStoragePool
func (mr *MockInstanceServerMockRecorder) UpdateStoragePool(name, pool, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePool), name, pool, ETag)
}

// DeleteStoragePool mocks base method
func (m *MockInstanceServer) DeleteStoragePool(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool
func (mr *MockInstanceServerMockRecorder) DeleteStoragePool(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePool), name)
}

// GetStoragePoolVolumeNames mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeNames(pool string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNames", pool)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNames indicates an expected call of GetStoragePoolVolumeNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNames(pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNames), pool)
}

// GetStoragePoolVolumes mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumes(pool string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumes", pool)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumes indicates an expected call of GetStoragePoolVolumes
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumes(pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumes", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumes), pool)
}

// GetStoragePoolVolume mocks base method
func (m *MockInstanceServer) GetStoragePoolVolume(pool, volType, name string) (*api.StorageVolume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolume", pool, volType, name)
	ret0, _ := ret[0].(*api.StorageVolume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolume indicates an expected call of GetStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolume(pool, volType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolume), pool, volType, name)
}

// CreateStoragePoolVolume mocks base method
func (m *MockInstanceServer) CreateStoragePoolVolume(pool string, volume api.StorageVolumesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolume", pool, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePoolVolume indicates an expected call of CreateStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolume(pool, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolume), pool, volume)
}

// UpdateStoragePoolVolume mocks base method
func (m *MockInstanceServer) UpdateStoragePoolVolume(pool, volType, name string, volume api.StorageVolumePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolume", pool, volType, name, volume, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolume indicates an expected call of UpdateStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolume(pool, volType, name, volume, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolume), pool, volType, name, volume, ETag)
}

// DeleteStoragePoolVolume mocks base method
func (m *MockInstanceServer) DeleteStoragePoolVolume(pool, volType, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolume", pool, volType, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolVolume indicates an expected call of DeleteStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolume(pool, volType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolume), pool, volType, name)
}

// RenameStoragePoolVolume mocks base method
func (m *MockInstanceServer) RenameStoragePoolVolume(pool, volType, name string, volume api.StorageVolumePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolume", pool, volType, name, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameStoragePoolVolume indicates an expected call of RenameStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolume(pool, volType, name, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolume), pool, volType, name, volume)
}

// CopyStoragePoolVolume mocks base method
func (m *MockInstanceServer) CopyStoragePoolVolume(pool string, source lxd.InstanceServer, sourcePool string, volume api.StorageVolume, args *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStoragePoolVolume", pool, source, sourcePool, volume, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStoragePoolVolume indicates an expected call of CopyStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) CopyStoragePoolVolume(pool, source, sourcePool, volume, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CopyStoragePoolVolume), pool, source, sourcePool, volume, args)
}

// MoveStoragePoolVolume mocks base method
func (m *MockInstanceServer) MoveStoragePoolVolume(pool string, source lxd.InstanceServer, sourcePool string, volume api.StorageVolume, args *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStoragePoolVolume", pool, source, sourcePool, volume, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveStoragePoolVolume indicates an expected call of MoveStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) MoveStoragePoolVolume(pool, source, sourcePool, volume, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MoveStoragePoolVolume), pool, source, sourcePool, volume, args)
}

// MigrateStoragePoolVolume mocks base method
func (m *MockInstanceServer) MigrateStoragePoolVolume(pool string, volume api.StorageVolumePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateStoragePoolVolume", pool, volume)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateStoragePoolVolume indicates an expected call of MigrateStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) MigrateStoragePoolVolume(pool, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MigrateStoragePoolVolume), pool, volume)
}

// CreateStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) CreateStoragePoolVolumeSnapshot(pool, volumeType, volumeName string, snapshot api.StorageVolumeSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeSnapshot indicates an expected call of CreateStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshot)
}

// DeleteStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) DeleteStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeSnapshot indicates an expected call of DeleteStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName)
}

// GetStoragePoolVolumeSnapshotNames mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshotNames(pool, volumeType, volumeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshotNames", pool, volumeType, volumeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshotNames indicates an expected call of GetStoragePoolVolumeSnapshotNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshotNames(pool, volumeType, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshotNames), pool, volumeType, volumeName)
}

// GetStoragePoolVolumeSnapshots mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshots(pool, volumeType, volumeName string) ([]api.StorageVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshots", pool, volumeType, volumeName)
	ret0, _ := ret[0].([]api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshots indicates an expected call of GetStoragePoolVolumeSnapshots
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshots(pool, volumeType, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshots), pool, volumeType, volumeName)
}

// GetStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string) (*api.StorageVolumeSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName)
	ret0, _ := ret[0].(*api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeSnapshot indicates an expected call of GetStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName)
}

// RenameStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) RenameStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string, snapshot api.StorageVolumeSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeSnapshot indicates an expected call of RenameStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName, snapshot)
}

// UpdateStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) UpdateStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string, volume api.StorageVolumeSnapshotPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName, volume, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolumeSnapshot indicates an expected call of UpdateStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName, volume, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName, volume, ETag)
}

// GetStoragePoolVolumeBackupNames mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeBackupNames(pool, volName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupNames", pool, volName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupNames indicates an expected call of GetStoragePoolVolumeBackupNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupNames(pool, volName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupNames), pool, volName)
}

// GetStoragePoolVolumeBackups mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeBackups(pool, volName string) ([]api.StoragePoolVolumeBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackups", pool, volName)
	ret0, _ := ret[0].([]api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackups indicates an expected call of GetStoragePoolVolumeBackups
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackups(pool, volName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackups), pool, volName)
}

// GetStoragePoolVolumeBackup mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeBackup(pool, volName, name string) (*api.StoragePoolVolumeBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackup", pool, volName, name)
	ret0, _ := ret[0].(*api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeBackup indicates an expected call of GetStoragePoolVolumeBackup
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackup(pool, volName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackup), pool, volName, name)
}

// CreateStoragePoolVolumeBackup mocks base method
func (m *MockInstanceServer) CreateStoragePoolVolumeBackup(pool, volName string, backup api.StoragePoolVolumeBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeBackup", pool, volName, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeBackup indicates an expected call of CreateStoragePoolVolumeBackup
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeBackup(pool, volName, backup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeBackup), pool, volName, backup)
}

// RenameStoragePoolVolumeBackup mocks base method
func (m *MockInstanceServer) RenameStoragePoolVolumeBackup(pool, volName, name string, backup api.StoragePoolVolumeBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeBackup", pool, volName, name, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeBackup indicates an expected call of RenameStoragePoolVolumeBackup
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeBackup(pool, volName, name, backup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeBackup), pool, volName, name, backup)
}

// DeleteStoragePoolVolumeBackup mocks base method
func (m *MockInstanceServer) DeleteStoragePoolVolumeBackup(pool, volName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeBackup", pool, volName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeBackup indicates an expected call of DeleteStoragePoolVolumeBackup
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeBackup(pool, volName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeBackup), pool, volName, name)
}

// GetStoragePoolVolumeBackupFile mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeBackupFile(pool, volName, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupFile", pool, volName, name, req)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupFile indicates an expected call of GetStoragePoolVolumeBackupFile
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupFile(pool, volName, name, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupFile), pool, volName, name, req)
}

// CreateStoragePoolVolumeFromBackup mocks base method
func (m *MockInstanceServer) CreateStoragePoolVolumeFromBackup(pool string, args lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeFromBackup", pool, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeFromBackup indicates an expected call of CreateStoragePoolVolumeFromBackup
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeFromBackup(pool, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeFromBackup), pool, args)
}

// GetCluster mocks base method
func (m *MockInstanceServer) GetCluster() (*api.Cluster, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster")
	ret0, _ := ret[0].(*api.Cluster)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockInstanceServerMockRecorder) GetCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceServer)(nil).GetCluster))
}

// UpdateCluster mocks base method
func (m *MockInstanceServer) UpdateCluster(cluster api.ClusterPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", cluster, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster
func (mr *MockInstanceServerMockRecorder) UpdateCluster(cluster, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCluster), cluster, ETag)
}

// DeleteClusterMember mocks base method
func (m *MockInstanceServer) DeleteClusterMember(name string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMember", name, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterMember indicates an expected call of DeleteClusterMember
func (mr *MockInstanceServerMockRecorder) DeleteClusterMember(name, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterMember), name, force)
}

// GetClusterMemberNames mocks base method
func (m *MockInstanceServer) GetClusterMemberNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMemberNames indicates an expected call of GetClusterMemberNames
func (mr *MockInstanceServerMockRecorder) GetClusterMemberNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberNames))
}

// GetClusterMembers mocks base method
func (m *MockInstanceServer) GetClusterMembers() ([]api.ClusterMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers")
	ret0, _ := ret[0].([]api.ClusterMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers
func (mr *MockInstanceServerMockRecorder) GetClusterMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMembers))
}

// GetClusterMember mocks base method
func (m *MockInstanceServer) GetClusterMember(name string) (*api.ClusterMember, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMember", name)
	ret0, _ := ret[0].(*api.ClusterMember)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMember indicates an expected call of GetClusterMember
func (mr *MockInstanceServerMockRecorder) GetClusterMember(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMember), name)
}

// UpdateClusterMember mocks base method
func (m *MockInstanceServer) UpdateClusterMember(name string, member api.ClusterMemberPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMember", name, member, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterMember indicates an expected call of UpdateClusterMember
func (mr *MockInstanceServerMockRecorder) UpdateClusterMember(name, member, ETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMember), name, member, ETag)
}

// RenameClusterMember mocks base method
func (m *MockInstanceServer) RenameClusterMember(name string, member api.ClusterMemberPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterMember", name, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterMember indicates an expected call of RenameClusterMember
func (mr *MockInstanceServerMockRecorder) RenameClusterMember(name, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterMember), name, member)
}

// RawQuery mocks base method
func (m *MockInstanceServer) RawQuery(method, path string, data interface{}, queryETag string) (*api.Response, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQuery", method, path, data, queryETag)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawQuery indicates an expected call of RawQuery
func (mr *MockInstanceServerMockRecorder) RawQuery(method, path, data, queryETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQuery", reflect.TypeOf((*MockInstanceServer)(nil).RawQuery), method, path, data, queryETag)
}

// RawWebsocket mocks base method
func (m *MockInstanceServer) RawWebsocket(path string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawWebsocket", path)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawWebsocket indicates an expected call of RawWebsocket
func (mr *MockInstanceServerMockRecorder) RawWebsocket(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).RawWebsocket), path)
}

// RawOperation mocks base method
func (m *MockInstanceServer) RawOperation(method, path string, data interface{}, queryETag string) (lxd.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawOperation", method, path, data, queryETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawOperation indicates an expected call of RawOperation
func (mr *MockInstanceServerMockRecorder) RawOperation(method, path, data, queryETag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawOperation", reflect.TypeOf((*MockInstanceServer)(nil).RawOperation), method, path, data, queryETag)
}
